func insertBlob(){        var dbPath:URL = URL()        var bindata:Data = Data()        var imagePath:String = ""        var urlObj:URL = URL()        let binName:String = "Test image"        let dirManager = FileManager.default()        do {            let directoryURL = try dirManager.urlForDirectory(FileManager.SearchPathDirectory.documentDirectory, in: FileManager.SearchPathDomainMask.userDomainMask, appropriateFor: nil, create: true)                        dbPath = directoryURL.urlByAppendingPathComponent("database.sqlite")            if( sqlite3_open(dbPath.absoluteString?.cString(using: String.Encoding.utf8)!,&sqlite3_db) == 0){                let sql:String = "Insert into binaryTbl(PictureName, ImageData) VALUES(?,?)"                                if(sqlite3_prepare_v2(sqlite3_db, sql.cString (using: String.Encoding.utf8)!, -1, &sqlite3_stmt, nil) != SQLITE_OK)                {                    print("Problem with prepare statement")                }else{                    imagePath = Bundle.main.pathForResource("IMG_0095", ofType: "JPG")!                    urlObj = URL(fileURLWithPath: imagePath)                    bindata = try! Data(contentsOf: urlObj)!                    sqlite3_bind_text(sqlite3_stmt, 1, binName.cString (using: String.Encoding.utf8)!, -1, SQLITE_TRANSIENT);                    sqlite3_bind_blob(sqlite3_stmt, 2, bindata.bytes,Int32(bindata.count), SQLITE_TRANSIENT);                   if(sqlite3_step(sqlite3_stmt)==SQLITE_DONE){                        sqlite3_finalize(sqlite3_stmt);                        sqlite3_close(sqlite3_db);                    }}            }} catch let err as NSError {            print("Error: \(err.domain)")        }     }