import UIKit

class ViewController: UIViewController {    
let dbName:String="chapter8.sqlite"    var db:COpaquePointer?=nil    var sqlStatement:COpaquePointer?=nil    var errMsg: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>! = nil    internal let SQLITE_STATIC = unsafeBitCast(0, for:sqlite3_destructor_type.self)    internal let SQLITE_TRANSIENT = unsafeBitCast(-1, for:sqlite3_destructor_type.self)    var dbPath:URL = URL(fileWithPath:””)    var errStr:String = ""    override func viewDidLoad() {        super.viewDidLoad()        let dirManager = FileManager.default()        do {            let directoryURL = try dirManager.urlForDirectory(FileManager.SearchPathDirectory.documentDirectory, in: FileManager.SearchPathDomainMask.userDomainMask, appropriateForL: nil, create: true)dbPath = try! directoryURL.appendingPathComponent(dbName)        } catch let err as NSError {            print("Error: \(err.domain)")        }        self.setupSampleTable()        self.addRecords()        self.sampleDelete()    }func setupSampleTable(){        let creatSQL:String = "CREATE TABLE IF NOT EXISTS sample(id int, name varchar)"        if(sqlite3_open(dbPath.path!, &db)==SQLITE_OK){            if(sqlite3_prepare_v2(db, creatSQL, -1, &sqlStatement, nil)==SQLITE_OK){                if(sqlite3_step(sqlStatement)==SQLITE_DONE){                    print("table created")                    sqlite3_finalize(sqlStatement)                    sqlite3_close(db)                }else{                    print("unable to create table")                }            }        }    }        func addRecords(){        let insertSQL:String = "INSERT INTO TABLE main.sample (id, name) VALUES(?,?)"        if(sqlite3_open(dbPath.path!, &db)==SQLITE_OK){            if(sqlite3_prepare_v2(db, insertSQL, -1, &sqlStatement, nil)==SQLITE_OK){                sqlite3_bind_int(sqlStatement, 1, 1)                sqlite3_bind_text(sqlStatement, 2, "kevin", -1, SQLITE_TRANSIENT)                if(sqlite3_step(sqlStatement)==SQLITE_DONE){                    print("table created")                    sqlite3_finalize(sqlStatement)                    sqlite3_close(db)                }else{                    print("unable to create table")                }            }        }    }func sampleDelete(){        let deleteStmt:String = "DELETE FROM sample WHERE id = ?"                 if(sqlite3_open(dbPath.path!, &db)==SQLITE_OK){            if(sqlite3_prepare_v2(db, deleteStmt, -1, &sqlStatement, nil)==SQLITE_OK){                sqlite3_bind_int(sqlStatement, 1, 1)                if(sqlite3_step(sqlStatement)==SQLITE_DONE){                    print("item deleted")                    sqlite3_finalize(sqlStatement)                    sqlite3_close(db)                }else{                    print("unable to delete")                }            }         }    }func sampleExecDelete(){        let deleteStmt:String = "DELETE FROM sampleTable WHERE id = ?"       if(sqlite3_open(dbPath.path!, &db)==SQLITE_OK){            if(sqlite3_exec(db, deleteStmt, nil, &sqlStatement, errMsg)==SQLITE_OK){                sqlite3_bind_int(sqlStatement, 1, 1)                sqlite3_close(db)            }else{                print("unable to delete")        }    }}