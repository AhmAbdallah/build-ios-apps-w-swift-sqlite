func numberOfComponents (_ in pickerView: UIPickerView) -> Int {        return 1    }        func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {        return wineriesArray.count    }        func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String?   {        vintnor = wineriesArray[row] as Wineries        let pickernames = vintnor.name        return  pickernames    }        func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {        vintnor = wineriesArray[row] as Wineries        vintnor.id = Int32(row)        wineriesPickerView.isHidden = false        }        func pickerView(_ pickerView: UIPickerView, widthForComponent component: Int) -> CGFloat {        return 300.0    }        func pickerView(_ pickerView: UIPickerView, rowHeightForComponent component: Int) -> CGFloat {        return 56.0    }        func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {        vintnor = wineriesArray[row] as Wineries        selectWineryField.text = vintnor.name                wineriesPickerView.endEditing(true)        wineriesPickerView.hidden = true    }    func pickerView(_ pickerView: UIPickerView, viewForRow row: Int, forComponent component: Int, reusing view: UIView?) -> UIView {        let test:UILabel = UILabel()        let titleData = wineriesArray[row].name        let myTitle = AttributedString(string: titleData, attributes: [NSFontAttributeName:UIFont(name: "Georgia", size: 15.0)!,NSForegroundColorAttributeName:UIColor.red()])        test.attributedText = myTitle        return test    }